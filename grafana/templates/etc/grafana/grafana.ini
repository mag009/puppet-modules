# WHEN UPGRADING make sure what is changed in defaults.ini and add it here
# Sample grafana config for deb & rpm packages
# You only need to specify overrides here
# Defaults are in the /opt/grafana/current/conf/defaults.ini file
# This file is never ovewritten when upgrading grafana via deb or rpm package

app_mode = production

[server]
; protocol (http or https)
protocol = <%= scope.lookupvar('grafana::protocol') %>
; the ip address to bind to, empty will bind to all interfaces
http_addr = <%= scope.lookupvar('grafana::http_address') %>
; the http port  to use
http_port = <%= scope.lookupvar('grafana::port') %>
; The public facing domain name used to access grafana from a browser
domain = <%= scope.lookupvar('grafana::domain') %>
; the full public facing url
root_url = %(protocol)s://%(domain)s:%(http_port)s/
router_logging = <%= scope.lookupvar('grafana::router_logging') %>
; the path relative to grafana process working directory
static_root_path = /usr/share/grafana/public
enable_gzip = <%= scope.lookupvar('grafana::gzip') %>
# https certs & key file
cert_file = "<%= scope.lookupvar('grafana::cert_file') %>"
cert_key = "<%= scope.lookupvar('grafana::cert_key') %>"


[database]
; Either "mysql", "postgres" or "sqlite3", it's your choice
type = <%= scope.lookupvar('grafana::db_type') %>
host = <%= scope.lookupvar('grafana::db_host') %>
name = <%= scope.lookupvar('grafana::db_name') %>
user = <%= scope.lookupvar('grafana::db_user') %>
password = <%= scope.lookupvar('grafana::db_password') %>
<% if scope.lookupvar('grafana::db_type') == 'postgres' -%>
; For "postgres" only, either "disable", "require" or "verify-full"
ssl_mode = disable
<% end -%>
<% if scope.lookupvar('grafana::db_type') == 'sqlite3' -%>
; For "sqlite3" only
path = /opt/grafana/data/grafana.db
<% end -%>

<% if scope.lookupvar('grafana::auth_ldap') == 'true' -%>
[auth.ldap]
enabled = true
config_file = /etc/grafana/ldap.toml
<% end -%>

[security]
; default admin user, created on startup
admin_user = admin 
; default admin password, can be changed before first start of grafana,  or in profile settings
admin_password = admin
; used for signing
secret_key = SW2YcwTIb9zpOOhoPsMm
; Auto-login remember days
login_remember_days = 7
cookie_username = grafana_user
cookie_remember_name = grafana_remember

[users]
; disable user signup / registration
allow_sign_up = <%= scope.lookupvar('grafana::allow_sign_up') %>
; Allow non admin users to create organizations
allow_org_create = <%= scope.lookupvar('grafana::allow_user_create_org') %>
# Set to true to automatically assign new users to the default organization (id 1)
auto_assign_org = <%= scope.lookupvar('grafana::auto_assign_org') %>
; Default role new users will be automatically assigned (if disabled above is set to true)
auto_assign_org_role = Viewer

[auth.anonymous]
; enable anonymous access
enabled = <%= scope.lookupvar('grafana::anonymous_access') %>
; specify organization name that should be used for unauthenticated users
org_name = <%= scope.lookupvar('grafana::default_org') %>
; specify role for unauthenticated users
org_role = <%= scope.lookupvar('grafana::default_role') %>

[auth.github]
enabled = false
client_id = some_id
client_secret = some_secret
scopes = user:email
auth_url = https://github.com/login/oauth/authorize
token_url = https://github.com/login/oauth/access_token

[auth.google]
enabled = false
client_id = some_client_id
client_secret = some_client_secret
scopes = https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email
auth_url = https://accounts.google.com/o/oauth2/auth
token_url = https://accounts.google.com/o/oauth2/token


<% if scope.lookupvar('grafana::auth_proxy') == 'true' -%>
[auth.basic]
enabled = false

[auth.proxy]
header_property = username
auto_sign_up = true
enabled = true
header_name = X-Webauth-User
<% end -%>

[session]
; Either "memory", "file", "redis", "mysql", default is "memory"
provider =  <%= scope.lookupvar('grafana::sess_provider') %>
; Provider config options
; memory: not have any config yet
; file: session file path, e.g. `data/sessions`
; redis: config like redis server addr, poolSize, password, e.g. `127.0.0.1:6379,100,grafana`
; mysql: go-sql-driver/mysql dsn config string, e.g. `root:password@/session_table`
provider_config =  <%= scope.lookupvar('grafana::sess_provider_config') %>
; Session cookie name
cookie_name = grafana_sess
; If you use session in https only, default is false
cookie_secure = false
; Session life time, default is 86400
session_life_time = 86400
; Session hash key, default is use random string
session_id_hashkey =


[log]
;root_path = /var/log/grafana
; Either "console", "file", default is "console"
; Use comma to separate multiple modes, e.g. "console, file"
mode = file
; Buffer length of channel, keep it as it is if you don't know what it is.
buffer_len = 10000
; Either "Trace", "Debug", "Info", "Warn", "Error", "Critical", default is "Trace"
level = Info

; For "console" mode only
[log.console]
level =

; For "file" mode only
[log.file]
level =
; This enables automated log rotate(switch of following options), default is true
log_rotate = true
; Max line number of single file, default is 1000000
max_lines = 1000000
; Max size shift of single file, default is 28 means 1 << 28, 256MB
max_lines_shift = 28
; Segment log daily, default is true
daily_rotate = true
; Expired days of log file(delete after max days), default is 7
max_days = 7
